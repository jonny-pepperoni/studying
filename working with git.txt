0.  создать файл конфигурации !!дописать;
1.  открыть консоль и перейти в папку с проектом;
        # например "D:\Python project\tips_tricks>"
        ("project_path>" его алиас далее)
2.  прописать в консоли "git init" и получить сообщение 
    о инициализации пустого репозитория гит;
        # можно проверить правильность хода создания репозитория 
        используя последовательно "project_path>cd .git" 
        это переведет нас в папку .git и используя команду 
        "dir" посмотреть ее содержимое.
3.  используя команду "project_path>git status" можно получить
    информацию о ветке в которой работаем, комитах, и файлах
    которые трекаются;
4.  создаем* файл .gitignore в папке проекта и вносим в него 
    имена файлов которые гит будет игнорировать;
        * создавать .gitignore удобнее всего через IDE 
        сразу помещая его в папку проекта
        # имена файлов с их расширениями (passwords.txt, и тп.) 
        в которых храниятся пароли или любая важная конф.инфа 
        нужно вносить списком без кавычек каждый на новой строчке
        также можно добавить все файлы определенного типа используя 
        "*.txt" вместо имени файла
5.  команды "git add"/"git reset" позволяют добавлять/удалять
    файлы за которыми будет "следить" git;
        # чтобы добавить/удалить все файлы нужно
        использовать команду "git add -A"/"git reset"
        # чтобы добавить/удалить файлы определенного расширения 
        используем команду "git add *.txt"/"git reset *.txt"
        указав тот тип расширение файлы которого хотим добавить/удалить.
        # чтобы добавить/удалить конкретный файл используем 
        команду "git add <имя файла>"/git reset <имя файла>
6.  используя команду "git commit"  можно выбранные файлы
    закомитить - зафиксировать измнение в памяти git;
        # используя "git commit -m "Some important massage"" создаем
        комит, причем в сообщении нужно очень детально описать 
        изменения, внесенные в файл. 
        # для первого комита обычно используется "Initial commit"
        # после того как добавлен комит, в git status будет пусто.
7.  команда "git log" выдает информацию о уникальных хешах,
    и прочие метаданные о комитах

8.  команда git diff позволяет отобразить какие конкретно 
    измененя были произведены с файлами с момета последнего комита
        #  когда много изменений в множестве файлов ис сложно
        трекать,поэтому нужно детально прописать сообщение 
        при создании комита

