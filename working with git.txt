0.  создать файл конфигурации !!дописать;

__Создание репозитория__
1.  открыть консоль и перейти в папку с проектом;
        # например "D:\Python project\tips_tricks>"
        ("project_path>" его алиас далее)
2.  прописать в консоли "git init" и получить сообщение 
    о инициализации пустого репозитория гит;
        # можно проверить правильность хода создания репозитория 
        используя последовательно "project_path>cd .git" 
        это переведет нас в папку .git и используя команду 
        "dir" посмотреть ее содержимое.
3.  используя команду "git status" можно получить
    информацию о ветке в которой работаем, комитах, и файлах
    которые трекаются; "project_path>git status"- полная команда
4.  создаем* файл .gitignore в папке проекта и вносим в него 
    имена файлов которые гит будет игнорировать;
        * создавать .gitignore удобнее всего через IDE 
        сразу помещая его в папку проекта
        # имена файлов с их расширениями (passwords.txt, и тп.) 
        в которых храниятся пароли или любая важная конф.инфа 
        нужно вносить списком без кавычек каждый на новой строчке
        также можно добавить все файлы определенного типа используя 
        "*.txt" вместо имени файла
5.  команды "git add"/"git reset" позволяют добавлять/удалять
    файлы за которыми будет "следить" git;
        # чтобы добавить/удалить все файлы нужно
        использовать команду "git add ." или "git add -A"/"git reset"
        # чтобы добавить/удалить файлы определенного расширения 
        используем команду "git add *.txt"/"git reset *.txt"
        указав тот тип расширение файлы которого хотим добавить/удалить.
        # чтобы добавить/удалить конкретный файл используем 
        команду "git add <имя файла>"/git reset <имя файла>
6.  используя команду "git commit -m" можно выбранные файлы закомитить 
    - зафиксировать измнение в памяти git;
        # используя "git commit -m "Some important massage"" создаем
        комит, причем в сообщении нужно очень детально описать 
        изменения, внесенные в файл. 
        # для первого комита обычно используется "Initial commit"
        # если не написать "-m" то откроется ИДЕ и будет 
        ждать ввода коментанрия/сообщения
        # после того как добавлен комит, в git status будет пусто.

__Контроль состояний закомиченых репозиториев__ 
7.  команда "git log" выдает информацию о уникальных хешах,
    и прочие метаданные о комитах
8.  команда "git diff" позволяет отобразить какие конкретно 
    измененя были произведены с еще незакомичеными файлами
    с момета последнего комита
        #  когда много изменений в множестве файлов их сложно
        трекать,поэтому нужно детально прописать сообщение 
        при создании комита
9.  команда "git show <unique hash>" позволяет отобразить какие
    конкретно измененя были произведены с закомичеными 
    файлами, идентифецироваными по уникальному хешу

__Работа с репозиториями в сети__
10. команда "git clone <url> <where to clone>" позволяет клонировать
    репозиторий расположенный по адресу <url> и выбрать где 
    <where to clone> его сохранить;
11. команда "git remote -v" отображает информацию о репозитории 
    origin  https://github.com/jonny-pepperoni/studying.git (fetch)
    origin  https://github.com/jonny-pepperoni/studying.git (push)
12. команда "git branch -a" отображает информацию о всех ветках
    (branch) в репозитории как в локальных так и в ремоутных
    репозиториях
        # команда "git branch" отображает информацию о всех ветках
        (branch) в локальных репозитории, обозначение * показывает 
        в какой ветке мы сейчас находимся 
13. команда "git pull origin main" подтягивает последнюю версию
    из ремоута (предполагается что над проектом работает несколько
    разработчиков);
        #   репозиторий по имени origin подтягивается из главной 
        ветки main. Посмотреть origin репозитория можно командой 
        "git remote -v"
        #   если нужно работать с другой веткой, то вместо main
        вписать имя нужной ветки.
14. команда "git push origin main" подгружает последнюю закомиченую 
    локальную версию в ремоут;
        #   Посмотреть origin репозитория можно командой
        "git remote -v"
        #   Посмотреть нформацию о всех ветках "git branch -a"

__Стандартный рабочий процесс с гитом__
    Внесение изменений в существующий репозиторий:
        # "git branch <name>" создаем новую ветку; 
        # "git checkout <name>" переходим в ветку <name> 
        производим изменения, которые комитим (в ветку <name>), 
        комиты в <name> никак не затрагивает main ветку;
    Добавление утвержденных комитов из ветки <name>:
        # "git push -u origin <name>" пушатся в репозиторий 
        (не соединяются на даном этапе)
        # "git checkout main" переходим в ветку main
        # "git pull origin main" подтягивает все изменения 
        !(так надо делать всегда перед комитами в main ветку)
        # "git branch --merged" показывает какие ветки "слиты"
        # "git merge <name>" изменения из <name> соеденятся с main 
        в локальном репозитории
        # "git push origin main" пушит в удаленный репозиторий
    Удаление веток:
        После того как удостоверились что слияние произошло
        (проверить "git branch --merged") можно удалить ветку.
        # "git branch -d <name>" удалит ветку локально из репозитория
        # "git push origin --delete <name>" удалит ветку
        из remote репозитория








Заливаем готовый репозиторий в сеть (Github, и тп.)

https://monsterlessons.com/project/lessons/git-kak-rabotayut-vetki